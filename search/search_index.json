{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-py4pd","title":"What is py4pd?","text":"<p> Welcome to the py4pd documentation! </p> <p><code>py4pd</code> integrates the power of Python into the real-time environment of PureData, provide means for score visualization, AI integration, audio analysis tools, SVG/drawing score handling, and various other functionalities.</p> <p>How to install?</p> <p>To check how to install go to Installation.</p>"},{"location":"#examples-and-use-cases","title":"Examples and Use Cases","text":"<p>Here is presented algorithm tools implemented with <code>py4pd</code>. Users are encouraged to contribute their own examples through Github.</p>"},{"location":"#general-purposes","title":"General purposes","text":"Score In PureDataArtificial InteligenceDraws as scoresSpectral analysisAudio Descriptors Graphs <p>When I start to work with PureData, I miss a lot some score visualization tool, this can be solved by utilizing <code>py4pd</code>. This script is delivered along with the <code>py4pd</code> library.</p> <p><p> </p></p> <p>It is easy to use <code>AI</code> with <code>py4pd</code>. There are already powerful objects for realtime, like <code>nn~</code> and <code>ddsp~</code>, but they are designed to specify approaches. Below is an example using <code>py4pd</code> and the Python code used by <code>nn~</code> (offline processing).</p> <p><p> </p> </p> <p><p>          Your browser does not support the audio element.      </p></p> Python Code <p>To illustrate the statement \"Python offers a more accessible and user-friendly alternative that C and C++\", presented earlier, here is an example of Python code: </p> <pre><code>import pd # py4pd library\nimport torch # Library of AI\nimport librosa # Library to load audios in Python\n\ndef renderAudio_nn(audio, model):\n    model = pd.home() + '/' + model # get the pathname of model.ts, that is the result of the IA trained.\n    audio = pd.home() + '/' +  audio # The audio source\n    torch.set_grad_enabled(False) # config of the IA\n    model = torch.jit.load(model).eval() # Load model of IA\n    x = librosa.load(audio)[0] # take the audio samples of the sound (audio)\n    x_for = torch.from_numpy(x).reshape(1, 1, -1) # transform the audio to fit in the IA model\n    z = model.encode(x_for) # tranlate for the IA thing, I believe here is the black box.\n    z[:, 0] += torch.linspace(-2, 2, z.shape[-1]) # No idea;\n    y = model.decode(z).numpy().reshape(-1) # Now we have sound again!\n    pd.tabwrite('iaAudio', y.tolist(), resize=True) # Here we write the sound in the table 'iaAudio'.\n    pd.print('Audio rendered')\n</code></pre> <p>In this example, I use the SVG file above to render sounds using the new <code>else/plaits~</code>. Besides <code>earplug~</code>, and <code>cyclone/coll</code>. The colors control the <code>plaits~</code> parameters.</p> <p><p> </p></p> <p><p>          Your browser does not support the audio element.      </p></p> <p>In Python, there is not just one Spectral Analysis package. I mainly use <code>loristrck</code> because of the <code>.sdif</code> files. But there is <code>simpl</code>, <code>librosa</code>, PyAudio_FFT, among others. If you want to spectral manipulations you can work with <code>pysdif3</code> that is fast and amazing. Here an example using <code>loristrck</code> in PureData.</p> <p><p> </p></p> <p>You can use some of the amazing Audio Descriptors provided by <code>audioflux</code> for some analisys. </p> <p><p> </p></p>"},{"location":"#pieces","title":"Pieces","text":"Eco (2023)Moteto (2023) <p>Eco (2023) is the first version of one under developing piece that use some concepts of the composer Ricardo Thomasi in his PhD research. The idea here, is to use smartphones/tablets putted in the performance music stand, to make realtime <code>FFT</code> and <code>Partial Tracking</code> and then, generate scores that are played. The smartphones/tablets send data to PureData, and using <code>py4pd</code>, we generate realtime scores using <code>neoscore</code>.</p> <p><p> </p></p> <p>The piece Moteto aims to be a rereading of medieval motet. In addition, to overlapping independent voices, we use Just Intonation structures. With the help of technology, I aim to make the piece playable, also by amateur choirs, it is available in this website: www.charlesneimog.com/moteto/.</p>"},{"location":"libraries/","title":"External Libraries","text":"<p><code>py4pd</code> libraries contain extra tools dedicated to specific purposes. </p> <p>You can download the libraries using <code>deken</code>. To install the library search for the library name.</p> Gif of installation process <p> Process of install pd-ji on PureData </p>"},{"location":"libraries/#list-of-libraries","title":"List of Libraries","text":"Library Name Description Author pd-ji It creates an environment for the microtonal music composition, mainly for Just Intonation composition. Charles K. Neimog orchidea It allows loading Orchidea samples using midi inputs. Charles K. Neimog"},{"location":"objects/","title":"Pd Objects with Python","text":"<p>With the <code>py4pd</code> it is possible to create new PureData objects using Python. For that, you need to declare your Python functions and then create a function called <code>py4pdLoadObjects</code>. Inside this function we use <code>pd.addobject</code> (check the docs) to add all functions that you want to use as objects.</p> <p>See the Python Code:</p> myNewPdObjects.py<pre><code>import pd\n\ndef mysumObject(a, b, c, d):\n    return a + b + c + d\n\ndef py4pdLoadObjects():\n    pd.addobject(mysumObject, \"mysumObject\") # function, string with name of the object\n\n    # My License, Name and University, others information\n    pd.print(\"\", show_prefix=False)\n    pd.print(\"GPL3 | by Charles K. Neimog\", show_prefix=False)\n    pd.print(\"University of S\u00e3o Paulo\", show_prefix=False)\n    pd.print(\"\", show_prefix=False)\n</code></pre> <p>In the code above, we create a new object called <code>mysymObject</code>. It is saved inside an script called <code>myNewPdObjects.py</code>. To load this script in PureData how need to follow these steps:</p> <ul> <li>Copy the script <code>myNewPdObjects.py</code> for the folder where your PureData patch is.</li> <li>Create a new <code>py4pd</code> with this config: <code>py4pd -lib myNewPdObjects</code>.</li> <li>Create the new object, in this case <code>mysumObject</code>.</li> </ul> <p>Following this steps we have this patch:</p> <p> </p>"},{"location":"objects/#types-of-objects","title":"Types of Objects","text":"<p>In the example above we create ordinary objects. With <code>py4pd</code> we can create 5 types of objects: </p> Ordinary ObjectsVisualization ObjectsAudio In ObjectsAudio Out ObjectsAudio (in and out) Objects <p>Used to create functions like sum numbers, convertion between datas (svg to scores, for example), etc.</p> <p>Used to create functions to show something. Like Scores, Audio descriptors, and others.</p> <p>To create vis object, in <code>pd.addobject</code> we add the <code>objtype=pd.VIS</code>. Inside the function, we always need the <code>pd.show</code> method, without it, anything will be showed.  For <code>pd.VIS</code> objects, we have some options in <code>pd.addobject</code>.</p> <ul> <li><code>figsize</code>: It set the size of the figure that will be showed, this is more for aesthetic reasons (the figure will always be resized).</li> </ul> <p>See the example:</p> Python Code <pre><code>import pd\nimport audioflux as af\nimport matplotlib.pyplot as plt\nfrom audioflux.display import fill_plot, fill_wave\nfrom audioflux.type import SpectralFilterBankScaleType, SpectralDataType\nimport numpy as np\n\ndef descriptors():\n    audio_arr, sr = af.read(pd.home() + \"/Hp-ord-A4-mf-N-N.wav\")\n    bft_obj = af.BFT(num=2049, samplate=sr, radix2_exp=12, slide_length=1024,\n                   data_type=SpectralDataType.MAG,\n                   scale_type=SpectralFilterBankScaleType.LINEAR)\n    spec_arr = bft_obj.bft(audio_arr)\n    spec_arr = np.abs(spec_arr)\n    spectral_obj = af.Spectral(num=bft_obj.num,\n                               fre_band_arr=bft_obj.get_fre_band_arr())\n    n_time = spec_arr.shape[-1]  # Or use bft_obj.cal_time_length(audio_arr.shape[-1])\n    spectral_obj.set_time_length(n_time)\n    hfc_arr = spectral_obj.hfc(spec_arr)\n    cen_arr = spectral_obj.centroid(spec_arr) \n\n    fig, ax = plt.subplots(nrows=3, sharex=True)\n    fill_wave(audio_arr, samplate=sr, axes=ax[0])\n    times = np.arange(0, len(hfc_arr)) * (bft_obj.slide_length / bft_obj.samplate)\n    fill_plot(times, hfc_arr, axes=ax[1], label='hfc')\n    fill_plot(times, cen_arr, axes=ax[2], label=\"Centroid\")\n    tempfile = pd.tempfolder() + \"/descritores.png\"\n    plt.savefig(tempfile)\n    pd.show(tempfile)\n    pd.print(\"Data plotted\")\n\ndef py4pdLoadObjects():\n    pd.addobject(descriptors, \"descritores\", objtype=pd.VIS, figsize=(640, 480))\n</code></pre> <p><p> </p></p> <p>Used to output analised data from audio. Objects with Partial Trackings, Audio Descriptors, and others.</p> <p>To create Audio In object, in <code>pd.addobject</code> we add the <code>objtype=pd.AUDIOIN</code>. </p> <p>The first inlet of this objects always need to be audio</p> <p><p> </p></p> Python Code <pre><code>import pd\nimport numpy\n\ndef audioin(audio):\n    fft = numpy.fft.fft(audio)\n    fft = numpy.real(fft) \n    return fft.tolist() # numpy can just be outputed when pyout=True\n\ndef py4pdLoadObjects():\n    pd.addobject(audioin, \"audioin\", objtype=pd.AUDIOIN)\n</code></pre> <p>Used to create audio using Python. Objects that creates sinusoids, some special noise and others.</p> <p>To create Audio out object, in <code>pd.addobject</code> we add the <code>objtype=pd.AUDIOOUT</code>. </p> <p><p> </p></p> Python Code <pre><code>import pd\nimport numpy\n\ndef audioin(audio):\n    fft = numpy.fft.fft(audio)\n    fft = numpy.real(fft) \n    return fft.tolist() # numpy can just be outputed when pyout=True\n\ndef py4pdLoadObjects():\n    pd.addobject(audioin, \"audioin\", objtype=pd.AUDIOIN)\n</code></pre> <p>Used to manipulations of Audio. FFT, reverbs, and others. </p> <p>To create Audio object (audio input and output), in <code>pd.addobject</code> we add the <code>objtype=pd.AUDIO</code>. </p> <p><p> </p></p> Python Code <pre><code>import pd\nimport numpy\n\ndef audio(audio, amplitude):\n    if amplitude is None:\n        amplitude = 0.2\n    audio = numpy.multiply(audio, amplitude)\n    return audio\n\n\ndef py4pdLoadObjects():\n    pd.addobject(audio, \"audio\", objtype=pd.AUDIO)\n</code></pre>"},{"location":"puredata-users/","title":"py4pd Object","text":""},{"location":"puredata-users/#py4pd-args","title":"<code>py4pd</code> Args","text":"<p>For the creation of the object, there is some options. Here I will explain each one.</p> <p>Note</p> <p>This is a very important part of <code>py4pd</code>, as users, you need to understand the ideia of all arguments. Not understandt it can generate problems and instabilities.</p>"},{"location":"puredata-users/#load-python-libraries","title":"Load Python Libraries","text":"<p>It is possible to use <code>py4pd</code> to create PureData objects using Python. To load this Python objects in PureData you can use <code>py4pd</code> with the <code>-library</code> flag and then the name of the script. For example, if the script have the name <code>myPythonObjects.py</code>, you need to create an <code>py4pd</code> object with <code>py4pd -library myPythonObjects</code>. </p> <p>Info</p> <p>The order of the arguments is important, <code>py4pd myPythonObjects -library</code> will not work!</p>"},{"location":"puredata-users/#audio-options","title":"Audio options","text":"<p>If the Python function that you are using work with audio, you need to create the object with one of this argument <code>-audioin</code>, <code>-audioout</code> or <code>-audio</code>.</p> <ul> <li><code>-audioin</code>: It creates one object that accepts audio input but no audio output, this can be used for audio analysis. Like <code>sigmund~</code>.</li> <li><code>-audioout</code>: It creates one object that accepts audio output but no audio input, this can be used for create some synthesis process inside Python.</li> <li><code>-audio</code>: It creates one object that accepts audio input and output, this is used for create audio manipulation in Python.</li> </ul>"},{"location":"puredata-users/#canvas-options","title":"Canvas options","text":"<p>There are options to show things inside a PureData patch. This can be used for show images, score, graphs and others.</p> <ul> <li><code>-canvas</code>: It creates one clear canvas where, from Python, you can show things inside PureData. See some examples:</li> <li><code>-score</code>: It creates a clear score used to show scores inside PureData. </li> </ul> Tip <p>This is part of <code>py4pd</code> scripts. You can use, <code>py4pd -score score note</code> to show one single note, <code>py4pd -score score chord</code> to show chords, and     soon will be possible to use <code>py4pd -score score chord-seq</code> to show chord-seq (yes, like OpenMusic and OM-Sharp). </p>"},{"location":"puredata-users/#editor-options","title":"Editor options","text":"<p>For who works with Python, you can set the IDE <code>editor</code> in the creation of the <code>py4pd</code>. For now, we have four implemented IDEs:</p> <ul> <li><code>-vscode</code>: It is the default IDE, you do not need to use <code>-vscode</code> at least you have an <code>py4pd.cfg</code> file.</li> <li><code>-nvim</code>: It sets <code>nvim</code> as the editor of <code>py4pd</code>.</li> <li><code>-emacs</code>: It sets <code>emacs</code> as the editor of <code>py4pd</code>.</li> <li><code>-sublime</code>: It sets <code>sublime</code> as the editor of <code>py4pd</code>.</li> </ul>"},{"location":"puredata-users/#set-function","title":"Set function","text":"<p>You can <code>load</code> functions in the creation of the object. For that, you must put the script name and then the function name. The name of the script file always need be the first. You can use <code>py4pd -canvas score note</code>, <code>py4pd score note -canvas</code> but <code>py4pd note score -canvas</code> or <code>py4pd note -canvas score</code> will not work when the script name is <code>score.py</code> and <code>note</code> is the function.</p>"},{"location":"puredata-users/#py4pd-methods","title":"<code>py4pd</code> Methods","text":"<p>Next, I present all methods used in <code>py4pd</code> object. But the three main <code>methods</code> are: (1)</p> <ul> <li>set: It load the <code>Python</code> function.</li> <li>install: It install <code>Python</code> libraries (not ready yet).</li> <li>run: It run the <code>Python</code> function.</li> <li>key: It save <code>parameters</code> for be used inside functions.</li> </ul>"},{"location":"puredata-users/#user-methods","title":"User Methods","text":""},{"location":"puredata-users/#set","title":"<code>set</code>","text":"<p>It set/load Python Function to <code>py4pd</code> object.</p> <ul> <li><code>arg1</code>: name of the script/library</li> <li><code>arg2</code>: name of the function</li> <li><code>example</code>: <code>set score chord</code>.</li> </ul> Tip <p>If you will always use the same function, you can create the object with the <code>py4pd script function</code>. </p>"},{"location":"puredata-users/#run","title":"<code>run</code>","text":"<p>Run the Python function.</p> <ul> <li><code>*arg</code>: The list of args will change according to the function.</li> <li><code>example</code>: <code>run 1 2</code>, <code>run [c4 c5 db6]</code> and others.</li> </ul> Info <p>The function must be loaded. </p>"},{"location":"puredata-users/#key","title":"<code>key</code>","text":"<p>Set value for some <code>string</code> key. This value is stored inside <code>py4pd</code> object and can be used inside Python using <code>pd.getkey</code>.</p> <ul> <li><code>arg1</code>: Name of the <code>key</code>.</li> <li><code>arg2</code>: Value of the <code>key</code>.</li> <li><code>example</code>: <code>key fft-size 1024</code>, <code>key clef G</code>, <code>key primenumbers [11 19 1997]</code>.</li> </ul>"},{"location":"puredata-users/#doc","title":"<code>doc</code>","text":"<p>It prints on PureData the documentation of the function (if it exits).</p> <ul> <li><code>arg</code>: This message do not use any args.</li> <li><code>example</code>: <code>doc</code>.</li> </ul>"},{"location":"puredata-users/#developer-methods","title":"Developer Methods","text":""},{"location":"puredata-users/#open","title":"<code>open</code>","text":"<p>It open <code>py</code> script files, case the file does not exist in the patch folder, it creates a new Python Script. <code>open score</code>, for example, will open the <code>score.py</code> (if it exists) or create <code>score.py</code>.</p> <ul> <li><code>arg1</code>: name of the script</li> <li><code>example</code>: <code>open score</code>.</li> </ul>"},{"location":"puredata-users/#editor","title":"<code>editor</code>","text":"<p>With no arguments it will open the Python Script loaded with the message <code>set</code>. Additionally you can choose between four IDE: <code>vscode</code>, <code>nvim</code>, <code>emacs</code> or <code>sublime</code>.</p> <ul> <li><code>arg1</code>: name of the editor that you use.</li> <li><code>example</code>: <code>editor nvim</code>.</li> </ul> Tip <p>If one function is loaded, <code>click</code> in the object will open the loaded function too.</p>"},{"location":"puredata-users/#reload","title":"<code>reload</code>","text":"<p>If you are working on a Python Script and change the code, you need send this message to the <code>py4pd</code> for the changes be loaded. </p> <ul> <li><code>arg</code>: There is no args. </li> <li><code>example</code>: <code>reload</code>.</li> </ul>"},{"location":"puredata-users/#restart","title":"<code>restart</code>","text":"<p>This restart the Python for all objects <code>py4pd</code>. </p> <ul> <li><code>arg</code>: There is no args. </li> <li><code>example</code>: <code>restart</code>.</li> </ul> Warning <p>Caution, this can crash PureData and gerenerate problem with <code>import</code> modules. </p>"},{"location":"puredata-users/#thread","title":"<code>thread</code>","text":"<p>This turn <code>on/off</code> the threads of Python.</p> <ul> <li><code>arg1</code>: <code>1</code> for threads <code>on</code> <code>0</code> for threads <code>off</code>. </li> <li><code>example</code>: <code>thread 0</code>. </li> </ul> Failure <p>I removed this functions because of problems with the GIL of Python. I will wait for the PEP 684 that probably will be part of Python <code>3.12</code>.</p>"},{"location":"puredata-users/#numpy","title":"<code>numpy</code>","text":"<p>This turn <code>on/off</code> the numpy arrays in the <code>input</code> of audio functions. </p> <ul> <li><code>arg1</code>: <code>1</code> for numpy <code>on</code> <code>0</code> for numpy <code>off</code>. </li> <li><code>example</code>: <code>numpy 1</code>. </li> </ul> Tip <p>The use <code>numpy</code> make the code more fast, about 30% with using <code>fft</code> and <code>ifft</code> of <code>numpy</code>. </p>"},{"location":"puredata-users/#home","title":"<code>home</code>","text":"<p>Set the home for Python. It is similar to execute Python from some specific folder. For example, use <code>cd Downloads</code> then <code>python myscript.py</code> in the same terminal.</p> <ul> <li><code>arg1</code>: The new <code>home</code> pathname.</li> <li><code>example</code>: <code>home ~/Documents/Git/</code>. </li> </ul>"},{"location":"puredata-users/#packages","title":"<code>packages</code>","text":"<p>Set the packages path for Python. <code>py4pd</code> will look for modules inside this folders.</p> <ul> <li><code>arg1</code>: The new <code>packages</code> pathname.</li> <li><code>example</code>: <code>packages /home/neimog/miniconda3/envs/composition/lib/python3.11/site-packages</code>. </li> </ul> Tip <p>Observe that you can use <code>conda</code> or <code>miniconda</code> environment. In this example, I am using my conda environment called <code>composition</code>.</p>"},{"location":"python-users/","title":"Python Users","text":"<p>If you're using Python and PureData together, you can use the pd module within the py4pd package to exchange data, set configurations, and inform users of errors, among other things. This module is embedded in the <code>py4pd</code> code and is only accessible within the <code>py4pd</code> environment. It's similar to how Google Collab uses modules like <code>google.collab.drive</code> and <code>google.collab.widgets</code>. In the next section I present all the methods that are embbeded.</p>"},{"location":"python-users/#pd-objects-with-python","title":"Pd Objects with Python","text":"<p>With the <code>py4pd</code> it is possible to create new PureData objects using Python. For that, you need to declare your Python functions and then create a function called <code>py4pdLoadObjects</code>. Inside this function we use <code>pd.addobject</code> (check the docs) to add all functions that you want to use as objects.</p> <p>See the Python Code:</p> myNewPdObjects.py<pre><code>import pd\n\ndef mysumObject(a, b, c, d):\n    return a + b + c + d\n\ndef py4pdLoadObjects():\n    pd.addobject(mysumObject, \"mysumObject\") # function, string with name of the object\n\n    # My License, Name and University, others information\n    pd.print(\"\", show_prefix=False)\n    pd.print(\"GPL3 | by Charles K. Neimog\", show_prefix=False)\n    pd.print(\"University of S\u00e3o Paulo\", show_prefix=False)\n    pd.print(\"\", show_prefix=False)\n</code></pre> <p>In the code above, we create a new object called <code>mysymObject</code>. It is saved inside an script called <code>myNewPdObjects.py</code>. To load this script in PureData how need to follow these steps:</p> <ul> <li>Copy the script <code>myNewPdObjects.py</code> for the folder where your PureData patch is.</li> <li>Create a new <code>py4pd</code> with this config: <code>py4pd -lib myNewPdObjects</code>.</li> <li>Create the new object, in this case <code>mysumObject</code>.</li> </ul> <p>Following this steps we have this patch:</p> <p> </p>"},{"location":"python-users/#types-of-objects","title":"Types of Objects","text":"<p>In the example above we create ordinary objects. With <code>py4pd</code> we can create 5 types of objects: </p> Ordinary ObjectsVisualization ObjectsAudio In ObjectsAudio Out ObjectsAudio (in and out) Objects <p>Used to create functions like sum numbers, convertion between datas (svg to scores, for example), etc.</p> <p>Used to create functions to show something. Like Scores, Audio descriptors, and others.</p> <p>To create vis object, in <code>pd.addobject</code> we add the <code>objtype=pd.VIS</code>. Inside the function, we always need the <code>pd.show</code> method, without it, anything will be showed.  For <code>pd.VIS</code> objects, we have some options in <code>pd.addobject</code>.</p> <ul> <li><code>figsize</code>: It set the size of the figure that will be showed, this is more for aesthetic reasons (the figure will always be resized).</li> </ul> <p>See the example:</p> Python Code <pre><code>import pd\nimport audioflux as af\nimport matplotlib.pyplot as plt\nfrom audioflux.display import fill_plot, fill_wave\nfrom audioflux.type import SpectralFilterBankScaleType, SpectralDataType\nimport numpy as np\n\ndef descriptors():\n    audio_arr, sr = af.read(pd.home() + \"/Hp-ord-A4-mf-N-N.wav\")\n    bft_obj = af.BFT(num=2049, samplate=sr, radix2_exp=12, slide_length=1024,\n                   data_type=SpectralDataType.MAG,\n                   scale_type=SpectralFilterBankScaleType.LINEAR)\n    spec_arr = bft_obj.bft(audio_arr)\n    spec_arr = np.abs(spec_arr)\n    spectral_obj = af.Spectral(num=bft_obj.num,\n                               fre_band_arr=bft_obj.get_fre_band_arr())\n    n_time = spec_arr.shape[-1]  # Or use bft_obj.cal_time_length(audio_arr.shape[-1])\n    spectral_obj.set_time_length(n_time)\n    hfc_arr = spectral_obj.hfc(spec_arr)\n    cen_arr = spectral_obj.centroid(spec_arr) \n\n    fig, ax = plt.subplots(nrows=3, sharex=True)\n    fill_wave(audio_arr, samplate=sr, axes=ax[0])\n    times = np.arange(0, len(hfc_arr)) * (bft_obj.slide_length / bft_obj.samplate)\n    fill_plot(times, hfc_arr, axes=ax[1], label='hfc')\n    fill_plot(times, cen_arr, axes=ax[2], label=\"Centroid\")\n    tempfile = pd.tempfolder() + \"/descritores.png\"\n    plt.savefig(tempfile)\n    pd.show(tempfile)\n    pd.print(\"Data plotted\")\n\ndef py4pdLoadObjects():\n    pd.addobject(descriptors, \"descritores\", objtype=pd.VIS, figsize=(640, 480))\n</code></pre> <p><p> </p></p> <p>Used to output analised data from audio. Objects with Partial Trackings, Audio Descriptors, and others.</p> <p>To create Audio In object, in <code>pd.addobject</code> we add the <code>objtype=pd.AUDIOIN</code>. </p> <p>The first inlet of this objects always need to be audio</p> <p><p> </p></p> Python Code <pre><code>import pd\nimport numpy\n\ndef audioin(audio):\n    fft = numpy.fft.fft(audio)\n    fft = numpy.real(fft) \n    return fft.tolist() # numpy can just be outputed when pyout=True\n\ndef py4pdLoadObjects():\n    pd.addobject(audioin, \"audioin\", objtype=pd.AUDIOIN)\n</code></pre> <p>Used to create audio using Python. Objects that creates sinusoids, some special noise and others.</p> <p>To create Audio out object, in <code>pd.addobject</code> we add the <code>objtype=pd.AUDIOOUT</code>. </p> <p><p> </p></p> Python Code <pre><code>import pd\nimport numpy\n\ndef audioin(audio):\n    fft = numpy.fft.fft(audio)\n    fft = numpy.real(fft) \n    return fft.tolist() # numpy can just be outputed when pyout=True\n\ndef py4pdLoadObjects():\n    pd.addobject(audioin, \"audioin\", objtype=pd.AUDIOIN)\n</code></pre> <p>Used to manipulations of Audio. FFT, reverbs, and others. </p> <p>To create Audio object (audio input and output), in <code>pd.addobject</code> we add the <code>objtype=pd.AUDIO</code>. </p> <p><p> </p></p> Python Code <pre><code>import pd\nimport numpy\n\ndef audio(audio, amplitude):\n    if amplitude is None:\n        amplitude = 0.2\n    audio = numpy.multiply(audio, amplitude)\n    return audio\n\n\ndef py4pdLoadObjects():\n    pd.addobject(audio, \"audio\", objtype=pd.AUDIO)\n</code></pre>"},{"location":"python-users/#embbeded-module-with-py4pd","title":"Embbeded Module with <code>py4pd</code>","text":""},{"location":"python-users/#write-puredata-objects","title":"Write PureData Objects","text":""},{"location":"python-users/#pdaddobject","title":"<code>pd.addobject</code>","text":"<p>You can create your own objects with Python. For that, you define the Python Function and add it as an object using <code>pd.addobject()</code>.</p> Breaking Changes <p>I had change how <code>pd.addobject</code> work from version <code>0.6</code> to version <code>0.7</code>. Now, me use the function and the Pure Data object. Instead of use this, <code>pd.addobject(\"mysumObject\", \"NORMAL\", \"myNewPdObjects\", \"mysumObject\")</code> we use this <code>pd.addobject(mysumObject, \"mysumObject\")</code>.</p> ParametersKeywordsExamples Parameters Type Description <code>arg1</code> <code>Python Function</code> Function that will be executed by the object. <code>arg2</code> <code>String</code> String to create the object. Keyword Type Description <code>objtype</code> <code>pd</code> The type of the object: <code>pd.VIS</code>, <code>pd.AUDIO</code>, <code>pd.AUDIOIN</code>, or <code>pd.AUDIOOUT</code>. Hiding this option will create a normal object. <code>figsize</code> <code>Tuple</code> Sets the pixel size of the object. Example: <code>figsize=(400, 200)</code> creates an object with a width of 400 and height of 200. <code>pyout</code> <code>Boolean</code> Determines whether the output will be in PureData data types or Python. If set to Python, it cannot be used by PureData. <code>no_outlet</code> <code>Boolean</code> Creates an object with no outlets if set to <code>True</code>. <code>added2pd_info</code> <code>Boolean</code> Prints the message <code>\"[py4pd]: Object {objectName} added to PureData\"</code> when set to <code>True</code>. <pre><code>pd.addobject(myFunction, \"mypyobj\", \n            objtype=pd.VIS, figsize=(400, 200), \n            pyout=True, no_outlet=False, added2pd_info=False)\n</code></pre> <pre><code>import pd\n\n\ndef mysumObject(a, b, c, d):\n    return a + b + c + d\n\ndef py4pdLoadObjects():\n    pd.addobject(mysumObject, \"mysumObject\")\n\n    # My License, Name and University, others information\n    pd.print(\"\", show_prefix=False)\n    pd.print(\"GPL3 2023, Your Name\", show_prefix=False)\n    pd.print(\"University of S\u00e3o Paulo\", show_prefix=False)\n    pd.print(\"\", show_prefix=False)\n</code></pre> <p>Here we add the function <code>mysumObject</code> in PureData enviroment. For more infos read the Python Objects page.</p> <p><p> </p></p>"},{"location":"python-users/#exchanging-data","title":"Exchanging Data","text":"<p>These are the methods used to send data from Python to PureData. The inverse path is done mainly with <code>run</code> and <code>key</code> messages.  </p>"},{"location":"python-users/#pdout","title":"<code>pd.out</code>","text":"<p><code>pd.out()</code> allows you to output data to PureData without needing to wait for the Python function to finish executing. This is different from returning data to PureData using the <code>return</code> statement, which requires the function to complete before sending data. </p> ParametersKeywordsExamples Parameters Type Description <code>arg1</code> <code>Python Object</code> Python thing that will be outputed. Parameters Type Description <code>symbol</code> <code>string</code> It prepend the string in the output, can be used with <code>route</code> object. <p>For example, consider the following function:</p> <pre><code>import pd\n\n\ndef example_pdout():\n    for x in range(10):\n        pd.out(x, symbol=\"loop\")\n    pd.out(\"fim\", symbol=\"end\")\n</code></pre>"},{"location":"python-users/#pdsend","title":"<code>pd.send</code>","text":"<p>You can use <code>pd.send</code> to send data to a receive object in your PureData patch. This method takes in two arguments: the name of the <code>receive</code> object and the value you want to send. For instance, suppose you have a receive object named \"myReceiver\" in your patch. To send the value 42 to this object, you could use <code>pd.send(\"myReceiver\", 42)</code>.</p> ParametersExamples Parameters Type Description <code>arg1</code> <code>string</code> Name of the receive object. <code>arg2</code> <code>Python Object</code> Data that will be sent. <pre><code>import pd\n\n\ndef pd_send():\n    \"It sends a message to the py4pdreceiver receive.\"  \n    pd.send(\"py4pdreceiver\", \"hello from python!\")\n    pd.send(\"py4pdreceiver\", 1) \n    pd.send(\"py4pdreceiver\", [1, 2, 3, 4, 5])\n    return 0\n</code></pre> <p>In this example, it will send to <code>py4pdreceiver</code> the message <code>\"hello from python!\"</code>, then the number <code>1</code>, then the list <code>[1, 2, 3, 4, 5]</code>. </p>"},{"location":"python-users/#pdtabwrite","title":"<code>pd.tabwrite</code>","text":"<p><code>pd.tabwrite</code> is a method that is essentially a copy of the <code>tabwrite</code> object in PureData. With this method, you can write audio or any data supported to PureData array.</p> ParametersKeywordsExamples Parameters Type Description <code>arg1</code> <code>string</code> Name of the table. <code>arg2</code> <code>Python Object</code> List or array (numpy) of numbers. Keyword Type Description <code>rezise</code> <code>Boolean</code> Set if the table will be resized or not. <pre><code>  pd.tabwrite(\"table2test\", randomNumbers, resize=True)\n</code></pre>"},{"location":"python-users/#pdtabread","title":"<code>pd.tabread</code>","text":"<p><code>pd.tabread</code> is a method that is essentially a copy of the <code>tabread</code> object in PureData. With this method, you can read data from a PureData array directly from within your Python code. It will return one Numpy Array with the data of the table.</p> ParametersExamples Parameters Type Description <code>arg1</code> <code>string</code> Name of the table. <pre><code>import pd\n\ndef readFromArray():\n    valuesFromArray = pd.tabread(\"py4pdArray\")\n    return valuesFromArray # This code don't make any sense :), but you understand it.\n</code></pre>"},{"location":"python-users/#pdgetkey","title":"<code>pd.getkey</code>","text":"<p>With <code>pd.getkey</code>, you can retrieve the value of a specific key that has been set by the user in a <code>key</code> message to <code>py4pd</code> objects. For example, if the user sends a key message to <code>py4pd</code> with the name \"fft-size\" and a value of 1024, you can retrieve this value in your Python code using <code>pd.getkey(\"fft-size\")</code>. If the user hasn't defined a particular key, <code>pd.getkey</code> will return <code>None</code>, allowing you to set a default value if necessary.</p> ParametersExamples Parameters Type Description <code>arg1</code> <code>string</code> Name of the key. <pre><code>import pd\n\ndef someAudioFunction(audio): # (1)!\n    fftvalue = pd.getkey(\"fft-size\")\n    if fftvalue is None:\n        fftvalue = 2048 # default value for fft-size key.\n\n    # Do something with the audio.\n\n    return myGreatAudioManipulation\n</code></pre> <ol> <li>Remember, audio functions that run with <code>py4pd script myaudiofunction -audio</code> receive just one <code>arg</code> that is the audio. In Audio objects written in Python this is different.</li> </ol>"},{"location":"python-users/#info-for-the-user","title":"Info for the user","text":"<p>There are two messages used to print info in the PureData console, they are <code>pd.print</code> and <code>pd.error</code>. </p>"},{"location":"python-users/#pdprint","title":"<code>pd.print</code>","text":"<p>The ordinary function <code>print()</code> will not work in <code>py4pd</code> (unless that you open PureData from the terminal). So if you want to debug or print some info from the PureData console you need to use <code>pd.print</code>. </p> ParametersKeywordsExamples Parameters Type Description <code>arg1</code> <code>Python Object</code> Thing to print Parameters Type Description <code>show_prefix</code> <code>Python Object</code> When <code>False</code> it remove the string \"[Python]\" from the begin of the message <pre><code>import pd\n\npd.print(\"ok\") # It prints \"[Python] ok\"\npd.print(\"ok\", show_prefix=False) # It prints \"ok\".\n</code></pre>"},{"location":"python-users/#pderror","title":"<code>pd.error</code>","text":"<p>If you want to inform errors in PureData console use <code>pd.error</code> method. </p> ParametersExamples Parameters Type Description <code>arg1</code> <code>string</code> Message of the error. <pre><code>import pd\n\ndef main(arg1):\n    if isinstance(arg1, list):\n        for i in range(1, 10):\n\n    try:\n        # some wrong arg here ????\n\n    except:\n        pd.error(\"This is a not valid operation\")\n</code></pre>"},{"location":"python-users/#utilities","title":"Utilities","text":""},{"location":"python-users/#pdgetstrpointer","title":"<code>pd.getstrpointer</code>","text":"<p>When working with audio objects, there are situations where we require global variables or variables that retain their values across different runs. For instance, when creating a Python function to generate a sine wave, we may need a global variable for the phase in order to generate a continuous waveform. However, using Python Global Variables can be problematic when working with multiple objects, as all functions would modify the phase value, potentially overwriting it unintentionally. To address this issue, we introduced the pd.getobjpointer function, which returns a unique string representing the pointer of the C object. This string is unique and can be utilized in other contexts to locate and retrieve the desired global variable. </p> ParametersExamples <p>There is no <code>args</code> for this function.</p> <p>It just returns unique string.</p> <pre><code>import pd\n\nprint(pd.getstrpointer())\n</code></pre>"},{"location":"python-users/#pdgetglobalvar","title":"<code>pd.getglobalvar</code>","text":"<p>When working with audio objects, we have another helpful function called <code>pd.getglobalvar</code>. This function serves a similar purpose to <code>pd.getobjpointer</code>. Here, it creates the variable automatically if it doesn't exist yet.</p> ParametersKeywordsExamples Parameters Type Description <code>arg1</code> <code>string</code> Object Variable Name. Parameters Type Description <code>initial_value</code> <code>Python Object</code> With <code>initial_value</code> you can set one initial value for the string. <p>In the code snippet below, when we use <code>pd.getglobalvar(\"PHASE\")</code>, it retrieves the value of the variable associated with the current running object. If the value hasn't been set yet, it will be initialized to <code>0.0</code>.</p> <pre><code>phase = pd.getglobalvar(\"PHASE\", initial_value=0.0)\n</code></pre>"},{"location":"python-users/#pdsetglobalvar","title":"<code>pd.setglobalvar</code>","text":"<p>To set new values for the variable of the object we use <code>pd.setglobalvar</code>. In audio objects, for example, this value you be saved for the next block calculation.</p> ParametersExamples Parameters Type Description <code>arg1</code> <code>string</code> Object Variable Name. <code>arg2</code> <code>Python Object</code> Any Python Object. <pre><code>pd.setglobalvar(\"PHASE\", phase)\n</code></pre>"},{"location":"python-users/#images","title":"Images","text":""},{"location":"python-users/#pdshow","title":"<code>pd.show</code>","text":"<p>With <code>py4pd</code> you can display images inside PureData patches using Python, you can use the <code>pd.show</code> method. This method is essentially a copy of the <code>else/pic</code> object, but with an interface that allows you to easily show images from within your Python code.</p> <p>Supported extensions</p> <p>You can just use <code>.png</code>, <code>.gif</code>, and <code>.ppm</code> image formats. </p> ParametersExamples Parameters Type Description <code>arg1</code> <code>string</code> Pathname for the image that will be showed. <p>This is a big code, but I like it.</p> <pre><code>import pd\nfrom random import randint\nimport os\ntry:\n    from neoscore.common import *\nexcept Exception as e:\n    pd.error(str(e))\n    pd.error(\n        \"Please, run 'pip install neoscore -t ./py-modules' in the terminal from current folder\")\n\n\ndef getpitchKey(pitch):\n    note = {\n        # natural\n        'c': ['c', ''],\n        'd': ['d', ''],\n        'e': ['e', ''],\n        'f': ['f', ''],\n        'g': ['g', ''],\n        'a': ['a', ''],\n        'b': ['b', ''],\n        # sharp\n        'c#': ['c', 'accidentalSharp'],\n        'd#': ['d', 'accidentalSharp'],\n        'e#': ['e', 'accidentalSharp'],\n        'f#': ['f', 'accidentalSharp'],\n        'g#': ['g', 'accidentalSharp'],\n        'a#': ['a', 'accidentalSharp'],\n        'b#': ['b', 'accidentalSharp'],\n        # flat\n        'cb': ['c', 'accidentalFlat'],\n        'db': ['d', 'accidentalFlat'],\n        'eb': ['e', 'accidentalFlat'],\n        'fb': ['f', 'accidentalFlat'],\n        'gb': ['g', 'accidentalFlat'],\n        'ab': ['a', 'accidentalFlat'],\n        'bb': ['b', 'accidentalFlat'],\n    }\n    return note[pitch]\n\n\ndef chord(pitches):\n    try:\n        neoscore.shutdown()\n    except BaseException:\n        pass\n    neoscore.setup()\n    py4pdTMPfolder = pd.tempfolder()\n    for file in py4pdTMPfolder:\n        if file.endswith(\".ppm\"):\n            try:\n                os.remove(py4pdTMPfolder + \"/\" + file)\n            except BaseException:\n                pass\n    staffSoprano = Staff((Mm(0), Mm(0)), None, Mm(30))\n    trebleClef = 'treble'\n    Clef(ZERO, staffSoprano, trebleClef)\n    staffBaixo = Staff((ZERO, Mm(15)), None, Mm(30))\n    bassClef = 'bass'\n    Clef(ZERO, staffBaixo, bassClef)\n    Path.rect((Mm(-10), Mm(-10)), None, Mm(42), Mm(42),\n              Brush(Color(0, 0, 0, 0)), Pen(thickness=Mm(0.5)))\n    for pitch in pitches:\n        # in pitch remove not number\n        pitchWithoutNumber = pitch.replace(pitch[-1], '')\n        pitchOctave = int(pitch[-1])\n        pitchClass, accidental = getpitchKey(pitchWithoutNumber)\n        note = [(pitchClass, accidental, pitchOctave)]\n        if pitchOctave &lt; 4:\n            Chordrest(Mm(5), staffBaixo, note, (int(1), int(1)))\n        else:\n            Chordrest(Mm(5), staffSoprano, note, (int(1), int(1)))\n    randomNumber = randint(1, 100)\n    notePathName = py4pdTMPfolder + \"/\" + pitch + f\"{randomNumber}.ppm\"\n    neoscore.render_image(rect=None, dest=notePathName, dpi=150, wait=True)\n    neoscore.shutdown()\n    if os.name == 'nt':\n        notePathName = notePathName.replace(\"\\\\\", \"/\")\n    pd.show(notePathName) ## HERE THE pd.show\n    return None\n</code></pre> <p><p> </p></p>"},{"location":"python-users/#file-management","title":"File Management","text":""},{"location":"python-users/#pdhome","title":"<code>pd.home</code>","text":"<p>In <code>py4pd</code>, <code>pd.home</code> is a function that returns the path to the directory where the currently-running PureData patch is located. This can be useful for accessing files and resources relative to the location of the patch. </p> ParametersExamples <p>There is no <code>args</code> for this function.</p> <p>It just returns unique string with the pathname.</p> <pre><code>import pd\n\nprint(pd.home())\n</code></pre>"},{"location":"python-users/#pdtempfolder","title":"<code>pd.tempfolder</code>","text":"<p><code>pd.tempfolder</code> returns one pathname to save stuff that won't be used more than once, all files inside this folder are deleted when the PureData patch is closed.</p> ParametersExamples <p>There is no <code>args</code> for this function.</p> <p>It just returns unique string.</p> <pre><code>import pd\n\nprint(pd.tempfolder())\n</code></pre>"},{"location":"python-users/#pdpy4pdfolder","title":"<code>pd.py4pdfolder</code>","text":"<p><code>pd.py4pdfolder</code> returns the folder where the binary of <code>py4pd</code> is located.</p> ParametersExamples <p>There is no <code>args</code> for this function.</p> <p>It just returns unique string.</p> <pre><code>import pd\n\nprint(pd.py4pdfolder())\n</code></pre>"},{"location":"python-users/#audio-info","title":"Audio Info","text":""},{"location":"python-users/#pdsamplerate","title":"<code>pd.samplerate</code>","text":"<p>This get the current samplerate of PureData. You can use the <code>pd.SAMPLERATE</code> variable too.</p> ParametersExamples <p>There is no <code>args</code> for this function.</p> <p>It just returns unique string.</p> <pre><code>import pd\n\nprint(pd.samplerate())\n</code></pre>"},{"location":"python-users/#pdvecsize","title":"<code>pd.vecsize</code>","text":"<p>This get the current vectorsize/blocksize of PureData. You can use the <code>pd.VECSIZE</code> variable too.</p> ParametersExamples <p>There is no <code>args</code> for this function.</p> <p>It just returns unique string.</p> <pre><code>import pd\n\nprint(pd.vecsize())\n</code></pre>"},{"location":"setup/","title":"Installation","text":""},{"location":"setup/#setup","title":"Setup","text":"<p>We need install <code>py4pd</code> and Python. </p> <p>Python installation is required!</p> <p>Install just <code>py4pd</code> (no Python) will not work. </p>"},{"location":"setup/#install-py4pd","title":"Install <code>py4pd</code>","text":"<ol> <li>Open PureData, </li> <li>Go to <code>Help-&gt;Find Externals-&gt;</code>,</li> <li>Search for <code>py4pd</code>,</li> <li>Select py4pd and click on <code>Install</code>: </li> </ol> Process of install py4pd on PureData"},{"location":"setup/#install-python","title":"Install Python","text":"Windows macOS Linux <p>On <code>Windows</code> you can install Python like and ordirary software.</p> <ul> <li>Go to Python.org,</li> <li>Go to the bottom of the page and download: <code>Windows installer (64-bit)</code>.</li> <li>Install it as an ordinary program.</li> </ul> <p>Click if you are a Windows User</p> <p>I recommend mark the option <code>Add Python 3.10 to PATH</code>. Process of install py4pd on PureData </p> <p>On <code>MacOS</code> you can install Python like and ordirary software.</p> <ul> <li>Go to Python.org,</li> <li>Go to the bottom of the page and download: <code>macOS 64-bit universal2 installer</code>.</li> <li>Install it as an ordinary program.</li> </ul> <p>On <code>Linux</code> you can install Python like and ordirary software.</p> <ul> <li>Open the terminal.</li> <li>Run: <code>sudo dnf install python3.10</code> (Fedora) or <code>sudo apt install python3.10</code> (Ubuntu). </li> </ul>"},{"location":"setup/#old-versions-of-py4pd","title":"Old versions of py4pd","text":"Attention to Python Version <p>If you want to use old versions, the Python must follow the exact version of the compilation: </p> py4pd  version Python   version 0.7.0 Python 3.10 0.6.0 Python 3.10 0.5.0 Python 3.11 0.4.0 Python 3.11 0.3.0 Python 3.10 0.2.0 Python 3.10 0.1.0 Python 3.10 0.0.0 Python 3.10"}]}